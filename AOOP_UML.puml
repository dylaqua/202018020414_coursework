@startuml
' This class represents the data model of the game, including all core logic
class NumberleModel {
# List<String> equations ' List to store mathematical equations'
- String targetNumber ' The target number that players need to compute through equations'
- StringBuilder currentGuess ' Current guess result, tracks each step of guessing'
- int remainingAttempts ' Number of remaining attempts'
- boolean gameWon ' Flag to indicate if the game is won'
+ <<Create>> NumberleModel() ' Constructor, initializes the game model'
- void loadEquationsFromFile() ' Loads equations from a file'
+ void initialize() ' Initializes the game, resets game state'
+ boolean processInput(String) ' Processes player input and checks if it's correct'
- void updateGuessAndCheckWin(String) ' Updates the guess and checks if the game is won'
- boolean isValidInput(String) ' Checks the validity of input'
- boolean evaluateEquation(String) ' Evaluates if the equation is correct'
- double eval(String) ' Parses and calculates the value of a mathematical expression'
- int precedence(char) ' Determines the precedence of operators'
- double applyOp(char,double,double) ' Applies operators to operands'
+ boolean isGameOver() ' Checks if the game is over'
+ boolean isGameWon() ' Checks if the game is won'
+ String getTargetNumber() ' Gets the target number'
+ StringBuilder getCurrentGuess() ' Gets the current guess'
+ int getRemainingAttempts() ' Gets the number of remaining attempts'
+ void startNewGame() ' Starts a new game'
}

' Controller class, connects the model and view, handles user input
class NumberleController {
- INumberleModel model ' Model interface for interacting with the model'
- NumberleView view ' View for displaying game state and results'
+ <<Create>> NumberleController(INumberleModel) ' Constructor with dependency injection of the model'
+ void setView(NumberleView) ' Sets the view for the controller'
+ boolean processInput(String) ' Processes input, judged by the model'
+ void startNewGame() ' Starts a new game'
+ boolean isGameOver() ' Checks if the game is over'
+ boolean isGameWon() ' Checks if the game is won'
+ String getTargetWord() ' Gets the target number'
+ StringBuilder getCurrentGuess() ' Gets the current guess result'
+ int getRemainingAttempts() ' Gets the remaining attempts count'
}

' Test class for unit testing the model
class NumberleModelTest {
- NumberleModel model ' Instance of the model being tested'
~ void setUp() ' Sets up the testing environment'
+ void testLoadEquationsFromFile() ' Tests loading equations from a file'
~ void testValidInputProcessing() ' Tests processing of valid inputs'
~ void testInvalidInputFormat() ' Tests invalid input format'
~ void testInvalidEquationBalance() ' Tests invalid equation balance'
~ void testGameOverLogic1() ' Tests game over logic'
~ void testGameOverLogic2() ' Tests additional game over logic'
}

' Model interface, defines methods that the model should implement
interface INumberleModel {
~ {static} int MAX_ATTEMPTS ' Maximum number of attempts'
~ void initialize() ' Initializes the model'
~ boolean processInput(String) ' Processes input'
~ boolean isGameOver() ' Checks if the game is over'
~ boolean isGameWon() ' Checks if the game is won'
~ String getTargetNumber() ' Gets the target number'
~ StringBuilder getCurrentGuess() ' Gets the current guess'
~ int getRemainingAttempts() ' Gets the remaining attempts'
~ void startNewGame() ' Starts a new game'
}

' View class for graphical interface presentation
class NumberleView {
- NumberleModel model ' Model for obtaining game data'
- NumberleController controller ' Controller for handling user interaction'
- JFrame frame ' Main window frame'
- JTextField inputTextField ' Input field for user input'
- JLabel attemptsLabel ' Label for number of attempts'
- JTextPane guessHistoryPane ' Panel for guess history'
- JScrollPane scrollPane ' Scroll pane containing guess history'
- Map<Character,JButton> buttonMap ' Mapping of buttons for inputting numbers and operators'
- Map<Character,Color> buttonColorCache ' Cache for button colors'
- JButton newGameButton ' Button for starting a new game'
- Map<Color,Integer> colorPriorityMap ' Mapping of color priorities'
+ <<Create>> NumberleView(NumberleModel,NumberleController) ' Constructor with dependency injection of model and controller'
- void initializeFrame() ' Initializes the frame of the interface'
+ void update(Observable,Object) ' Updates the view'
+ void updateAttemptsLabel() ' Updates the attempts label'
- void updateGuessHistory() ' Updates the guess history'
- void updateAllButtonColors() ' Updates all button colors'
- boolean shouldUpdateButtonColor(Color,Color) ' Decides whether to update button color'
- void resetButtonColors() ' Resets button colors'
- void clearHistory() ' Clears history records'
}

' Main class to start the CLI application
class CLIApp {
+ {static} void main(String[]) ' Main method to launch CLI version of the game'
}

' Main class to start the GUI application
class GUIApp {
+ {static} void main(String[]) ' Main method to launch GUI version of the game'
+ {static} void createAndShowGUI() ' Creates and displays the graphical interface'
}


INumberleModel <|.. NumberleModel
java.util.Observable <|-- NumberleModel
Observer <|.. NumberleView
@enduml